name: Make Prebuilds
on:
  push:
    # branches:
    #   - 'master'
    paths:
      - '.github/workflows/prebuild.yaml'

# When a new Node.js version is released or for any other reason that a build
# needs to be triggered, amend this file and force-push.

env:
  # These should generally be the same:
  CANVAS_VERSION_TO_BUILD: "2.6.1" # no "v" prefix. TODO switch to $GITHUB_REF if we switch to `on: release`
  CANVAS_PREBUILT_VERSION: "0.0.1"

jobs:
  Linux:
    strategy:
      matrix:
        # Make sure to set this for the other builds also!
        node: [8, 9, 10, 11, 12, 13, 14]
    name: Node.js ${{ matrix.node }} on Linux
    runs-on: ubuntu-latest
    container:
      image: chearon/canvas-prebuilt:7
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Build
        env:
          OS: ${{ runner.os }}
        run: |
          npm install -g node-gyp
          npm install --ignore-scripts
          . prebuild/$OS/preinstall.sh
          cp prebuild/$OS/binding.gyp binding.gyp
          node-gyp rebuild -j 2
          . prebuild/$OS/bundle.sh

      - name: Test binary
        run: node -e "require('.')"

      - name: Make bundle
        id: make_bundle
        run: . prebuild/tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
            const tagName = `v${process.env.CANVAS_PREBUILT_VERSION}`;

            const releases = await github.repos.listReleases({
              owner: process.env.GITHUB_REPOSITORY.split("/")[0],
              repo: process.env.GITHUB_REPOSITORY.split("/")[1]
            });
            const release = releases.data.find(r => r.tag_name === tagName);

            for (const asset of release.assets) {
              if (asset.name === assetName) {
                await github.repos.deleteReleaseAsset({
                  owner: process.env.GITHUB_REPOSITORY.split("/")[0],
                  repo: process.env.GITHUB_REPOSITORY.split("/")[1],
                  asset_id: asset.id
                });
                break;
              }
            }

            // (This is equivalent to actions/upload-release-asset. We're
            // already in a script, so might as well do it here.)
            const r = await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });

  macOS:
    strategy:
      matrix:
        node: [8, 9, 10, 11, 12, 13, 14]
    name: Node.js ${{ matrix.node }} on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Build
        env:
          OS: ${{ runner.os }}
        run: |
          npm install -g node-gyp
          npm install --ignore-scripts
          . prebuild/$OS/preinstall.sh
          cp prebuild/$OS/binding.gyp binding.gyp
          node-gyp rebuild -j 2
          . prebuild/$OS/bundle.sh

      - name: Test binary
        run: node -e "require('.')"

      - name: Make bundle
        id: make_bundle
        run: . prebuild/tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
            const tagName = `v${process.env.CANVAS_PREBUILT_VERSION}`;

            const releases = await github.repos.listReleases({
              owner: process.env.GITHUB_REPOSITORY.split("/")[0],
              repo: process.env.GITHUB_REPOSITORY.split("/")[1]
            });
            const release = releases.data.find(r => r.tag_name === tagName);

            for (const asset of release.assets) {
              if (asset.name === assetName) {
                await github.repos.deleteReleaseAsset({
                  owner: process.env.GITHUB_REPOSITORY.split("/")[0],
                  repo: process.env.GITHUB_REPOSITORY.split("/")[1],
                  asset_id: asset.id
                });
                break;
              }
            }

            // (This is equivalent to actions/upload-release-asset. We're
            // already in a script, so might as well do it here.)
            const r = await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });

  Win:
    strategy:
      matrix:
        node: [8, 9, 10, 11, 12, 13, 14]
    name: Node.js ${{ matrix.node }} on Windows
    runs-on: windows-latest
    steps:
      # TODO drop when https://github.com/actions/virtual-environments/pull/632 lands
      - uses: numworks/setup-msys2@v1
        with:
          update: true
          path-type: inherit

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/checkout@v2

      - name: Setup
        run: |
          msys2do npm install -g node-gyp
          msys2do npm install --ignore-scripts
          msys2do . prebuild/Windows/preinstall.sh

      - name: Build
        run: |
          msys2do cp prebuild/Windows/binding.gyp binding.gyp
          msys2do node-gyp configure
          msys2do node-gyp rebuild -j 2

      - name: Bundle
        run: msys2do . prebuild/Windows/bundle.sh

      - name: Test binary
        run: node -e "require('.')"

      - name: Make asset
        id: make_bundle
        # I can't figure out why this isn't an env var already. It shows up with `env`.
        run: msys2do CANVAS_PREBUILT_VERSION=${{ env.CANVAS_PREBUILT_VERSION }} . prebuild/tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
            const tagName = `v${process.env.CANVAS_PREBUILT_VERSION}`;

            const releases = await github.repos.listReleases({
              owner: process.env.GITHUB_REPOSITORY.split("/")[0],
              repo: process.env.GITHUB_REPOSITORY.split("/")[1]
            });
            const release = releases.data.find(r => r.tag_name === tagName);

            for (const asset of release.assets) {
              if (asset.name === assetName) {
                await github.repos.deleteReleaseAsset({
                  owner: process.env.GITHUB_REPOSITORY.split("/")[0],
                  repo: process.env.GITHUB_REPOSITORY.split("/")[1],
                  asset_id: asset.id
                });
                break;
              }
            }

            // (This is equivalent to actions/upload-release-asset. We're
            // already in a script, so might as well do it here.)
            const r = await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });
